// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_HashPd_FullMethodName    = "/auth.AuthService/HashPd"
	AuthService_GenJWT_FullMethodName    = "/auth.AuthService/GenJWT"
	AuthService_ComparePd_FullMethodName = "/auth.AuthService/ComparePd"
	AuthService_ExtUserID_FullMethodName = "/auth.AuthService/ExtUserID"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	HashPd(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*HashRes, error)
	GenJWT(ctx context.Context, in *JWTReq, opts ...grpc.CallOption) (*JWTRes, error)
	ComparePd(ctx context.Context, in *CompareReq, opts ...grpc.CallOption) (*CompareRes, error)
	ExtUserID(ctx context.Context, in *ExtReq, opts ...grpc.CallOption) (*ExtRes, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) HashPd(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*HashRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashRes)
	err := c.cc.Invoke(ctx, AuthService_HashPd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenJWT(ctx context.Context, in *JWTReq, opts ...grpc.CallOption) (*JWTRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JWTRes)
	err := c.cc.Invoke(ctx, AuthService_GenJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ComparePd(ctx context.Context, in *CompareReq, opts ...grpc.CallOption) (*CompareRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareRes)
	err := c.cc.Invoke(ctx, AuthService_ComparePd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExtUserID(ctx context.Context, in *ExtReq, opts ...grpc.CallOption) (*ExtRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtRes)
	err := c.cc.Invoke(ctx, AuthService_ExtUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	HashPd(context.Context, *HashReq) (*HashRes, error)
	GenJWT(context.Context, *JWTReq) (*JWTRes, error)
	ComparePd(context.Context, *CompareReq) (*CompareRes, error)
	ExtUserID(context.Context, *ExtReq) (*ExtRes, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) HashPd(context.Context, *HashReq) (*HashRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashPd not implemented")
}
func (UnimplementedAuthServiceServer) GenJWT(context.Context, *JWTReq) (*JWTRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenJWT not implemented")
}
func (UnimplementedAuthServiceServer) ComparePd(context.Context, *CompareReq) (*CompareRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComparePd not implemented")
}
func (UnimplementedAuthServiceServer) ExtUserID(context.Context, *ExtReq) (*ExtRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtUserID not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_HashPd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).HashPd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_HashPd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).HashPd(ctx, req.(*HashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenJWT(ctx, req.(*JWTReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ComparePd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ComparePd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ComparePd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ComparePd(ctx, req.(*CompareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExtUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExtUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ExtUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExtUserID(ctx, req.(*ExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HashPd",
			Handler:    _AuthService_HashPd_Handler,
		},
		{
			MethodName: "GenJWT",
			Handler:    _AuthService_GenJWT_Handler,
		},
		{
			MethodName: "ComparePd",
			Handler:    _AuthService_ComparePd_Handler,
		},
		{
			MethodName: "ExtUserID",
			Handler:    _AuthService_ExtUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
